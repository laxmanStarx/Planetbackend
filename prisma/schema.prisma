// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init





// This is your Prisma schema file.

// This is your Prisma schema file.

// This is your Prisma schema file.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change this if you're using a different database
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  role        String   @default("user")  // Role field, default is 'user'
  orders      Order[]
  payments    Payment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  address     String
  image       String?
  menuItems   Menu[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Menu {
  id            String     @id @default(cuid())
  name          String
  description   String?
  price         Float
  image         String? 
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  orderItems    OrderItem[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  totalPrice  Float
  status      String      @default("Pending") // e.g., Pending, Completed, Canceled
  payment     Payment?    @relation("OrderPayment") // Reference the relation by a unique name
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  menuId    String
  menu      Menu     @relation(fields: [menuId], references: [id])
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
}


model Payment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  orderId         String   @unique  // Make it unique to indicate one-to-one relation
  order           Order    @relation("OrderPayment", fields: [orderId], references: [id]) // Match the relation name
  stripePaymentId String   @unique // ID from Stripe or payment gateway
  amount          Float    // Amount paid
  currency        String   // e.g., "USD", "EUR"
  status          String   @default("Pending") // e.g., Pending, Completed, Failed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}






// model User {
//   id          String      @id @default(cuid())
//   name        String
//   email       String       @unique
//   password    String
//   role        String       @default("user")
//   cart        Cart?        // A user has one cart
//   orders      Order[]      // A user can place multiple orders
//   payments    Payment[]    // A user can make multiple payments
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
// }

// model Restaurant {
//   id          String      @id @default(cuid())
//   name        String
//   address     String
//   image       String?
//   menuItems   Menu[]
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
// }

// model Menu {
//   id            String     @id @default(cuid())
//   name          String
//   description   String?
//   price         Float
//   image         String?
//   restaurantId  String
//   restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
//   orderItems    OrderItem[]
//   cartItems     CartItem[] // Relation to CartItem
//   createdAt     DateTime   @default(now())
//   updatedAt     DateTime   @updatedAt
// }

// model Cart {
//   id          String      @id @default(cuid())
//   userId      String      @unique // Ensures one-to-one relationship
//   user        User        @relation(fields: [userId], references: [id])
//   cartItems   CartItem[]  // Relation to CartItem
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
// }


// model CartItem {
//   id        String   @id @default(cuid())
//   quantity  Int
//   menuId    String
//   menu      Menu     @relation(fields: [menuId], references: [id])
//   cartId    String
//   cart      Cart     @relation(fields: [cartId], references: [id])
// }


// model Order {
//   id          String      @id @default(cuid())
//   userId      String
//   user        User        @relation(fields: [userId], references: [id])
//   orderItems  OrderItem[]
//   totalPrice  Float
//   status      String      @default("Pending")
//   payment     Payment?    @relation("OrderPayment")
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt
// }

// model OrderItem {
//   id        String   @id @default(cuid())
//   quantity  Int
//   menuId    String
//   menu      Menu     @relation(fields: [menuId], references: [id])
//   orderId   String
//   order     Order    @relation(fields: [orderId], references: [id])
// }

// model Payment {
//   id              String   @id @default(cuid())
//   userId          String
//   user            User     @relation(fields: [userId], references: [id])
//   orderId         String   @unique
//   order           Order    @relation("OrderPayment", fields: [orderId], references: [id])
//   stripePaymentId String   @unique
//   amount          Float
//   currency        String
//   status          String   @default("Pending")
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
// }




















